# For debugging.
define show: syntax ((args)) {
    debug $args
}

# Foundational stuff.

define and: syntax ((lst)) e {
    define r ()
    while $lst {
        set r: e eval (lst head)
        if (not $r) {
            return $r
        }
        set lst (lst tail)
    }
    return $r
}

define eq?: method ((args)) {
    define len: args length
    if (gt? 2 $len) {
        throw "expected 2 arguments, passed ${len}"
    }

    define c: args head
    set args: args tail
    while $args {
        if (not: equal? (string $c) (string (args head))) {
            return ()
        }

        set args: args tail
    }

    return true
}

define list: method ((l)) {
    return $l
}

define ne?: method ((args)) {
    not: eq? (splice $args)
}

define not:: syntax ((v)) e {
    return (not (e eval $v))
}

define or: syntax ((lst)) e {
    define r ()
    while $lst {
        set r: e eval (lst head)
        if $r {
            return $r
        }
        set lst (lst tail)
    }
    return $r
}

define source: method (basename) e {
    block {
        define args: glob $basename

        define len: args length
        eq? 1 $len || throw "expected 1 argument, passed $len"

        set basename: args head
    }

    define name $basename
    define paths ()

    if (resolves? PENISHELLPATH) {
        set paths: rend : $PENISHELLPATH
    }

    while (and $paths (not (exists $name))) {
        set name: mend / (paths head) $basename
        set paths: paths tail
    }

    define f: open r- $name

    define r: cons () ()
    define c $r
    while (define l: f read-list) {
        c set-tail (cons $l ())
        set c: c tail
    }
    set c: r tail

    f close

    define rval ()
    define eval-list: method (first rest) {
        if (null? $first) {
            return $rval
        }
        set rval: e eval $first # penishell:omit-from-trace
        eval-list (rest head) (rest tail)
    }
    eval-list (c head) (c tail) # penishell:omit-from-trace

    return $rval
}

define quasiquote: syntax (cell) e {
    if (not (cons? $cell)) {
        return $cell
    }

    if (null? $cell) {
        return $cell
    }

    if (equal? unquote (cell head)) {
        return (e eval (cell get 1))
    }

    cons {
        e eval (list quasiquote (cell head))
        e eval (list quasiquote (cell tail))
    }
}

define quote: syntax (v) {
    return $v
}

define object: syntax ((body)) e {
    body append (quote ((method self () = (return (resolve self)))))
    e eval (cons block $body)
}

# TODO: Add optional map literal argument.
define map: method () {
    object {
        export del $unset
        export get $get
        export has $set?
        export set $export
    }
}

define for: method (l m) {
    define r: cons () ()
    define c $r
    while $l {
        c set-tail (cons (m (l head)) ())
        set c (c tail)
        set l (l tail)
    }
    return (r tail)
}

# Capture, pipe, and redirection stuff.

define append-output-to
define append-output-errors-to
define capture
define input-from
define output-clobbers
define output-to
define output-errors-clobbers
define output-errors-to
define pipe-output-to
define pipe-output-errors-to
define process-substitution

block {
    define wrap-redir-r-ex: method ((block)) {
        set block: cons block $block

        quasiquote ((method () {
            define r ()

            catch ex {
                return (cons $r $ex)
            }

            set r (unquote $block)

            throw ()
        }))
    }

    define collect-unwrap-r-ex: method (c n) {
        define r ()

        set n: number $n
        while $n {
            define rex: c read

            set r: rex head

            define ex: rex tail

            # TODO: Handle cases where we want to throw ().
            if (not (null? $ex)) {
                throw $ex
            }

            set n: sub $n 1
        }

        return $r
    }

    define override-stdin: method (e c cmd) {
        e eval (wrap-redir-r-ex {
            list export stdin $c
        } $cmd)
    }

    define override-stdout: method (e c cmd) {
        e eval (wrap-redir-r-ex {
            list export stdout $c
        } $cmd)
    }

    define override-stdout-stderr: method (e c cmd) {
        e eval (wrap-redir-r-ex {
            list export stdout $c
            list export stderr $c
        } $cmd)
    }

    define make-pipe: method (override) {
        syntax (right (left)) e {
            define c: chan 2
            define p: pipe

            spawn {
                c write (override $e $p $left)
                p writer-close
            } 

            c write (override-stdin $e $p $right)
            p reader-close

            collect-unwrap-r-ex $c 2
        }
    }

    define make-redirect: method (check closer mode override) {
        syntax (c cmd) e {
            define c: e eval $c
            if (symbol? $c) {
                define l: glob $c
                if (lt? 1 (l length)) {
                    throw "can't redirect to/from multiple files"
                }
                set c: l head
            }

            define f ()
            if (not (or (chan? $c) (pipe? $c))) {
                if (and $check (exists -i $c)) {
                    if (eq? w $mode) {
                        throw "${c} exists"
                    }
                } else {
                    if (eq? r $mode) {
                        throw "${c} does not exist"
                    }
                }
                set f: open $mode $c
                set c $f
            }

            define ec-ex: override $e $c $cmd
            if (not: null? $f) {
                f $closer
            }

            define ex: ec-ex tail

            # TODO: Handle cases where we want to throw ().
            if (not: null? $ex) {
                throw $ex
            }

            return (ec-ex head)
        }
    }

    set append-output-to: make-redirect true writer-close a $override-stdout
    set append-output-errors-to: make-redirect true writer-close a $override-stdout-stderr

    set capture: syntax (cmd) e {
        define c: chan 1
        define p: pipe

        spawn {
            c write (override-stdout $e $p $cmd)
            p writer-close
        }

        define s: cons () ()
        define r $s

        while (define l: p read-line) {
            r set-tail (cons $l ())
            set r (r tail)
        }

        p reader-close

        collect-unwrap-r-ex $c 1

        return (s tail)
    }

    set input-from: make-redirect true reader-close r $override-stdin
    set output-clobbers: make-redirect () writer-close w $override-stdout
    set output-to: make-redirect true writer-close w $override-stdout
    set output-errors-clobbers: make-redirect () writer-close w $override-stdout-stderr
    set output-errors-to: make-redirect true writer-close w $override-stdout-stderr
    set pipe-output-to: make-pipe $override-stdout
    set pipe-output-errors-to: make-pipe $override-stdout-stderr

    set process-substitution: syntax ((args)) e {
        define channels ()
        define fifos ()

        define cmd: for $args (method (arg) {
            if (not: cons? $arg) {
                return $arg
            }

            if (equal? -named-pipe-input-from (arg head)) {
                define c: chan 1
                define fifo: temp-fifo

                spawn {
                    define f: open w $fifo
                    c write (override-stdout $e $f (arg tail))
                    f close
                }

                set channels: cons $c $channels
                set fifos: cons $fifo $fifos

                return $fifo
            }

            if (equal? -named-pipe-output-to (arg head)) {
                define c: chan 1
                define fifo: temp-fifo

                spawn {
                    define f: open r $fifo
                    c write (override-stdin $e $f (arg tail))
                    f close
                }

                set channels: cons $c $channels
                set fifos: cons $fifo $fifos

                return $fifo
            }

            return $arg
        })

        define mainecex: e eval (wrap-redir-r-ex $cmd)

        define ecexs ()
        for $channels (method (c) {
            set ecexs: cons (c read) $ecexs
        })

        set ecexs: cons $mainecex $ecexs

        for $fifos (method (fifo) {
            rm $fifo
        })

        for $ecexs (method (ecex) {
            define ex: ecex tail

            # TODO: Handle cases where we want to throw ().
            if (not: null? $ex) {
                throw $ex
            }
        })

        return (mainecex head)
    }
}

# Import stuff.

define import
define module: method (name) = # At the top-level module is a no-op.

block {
    define do-import: method (callback path) {
        define import-return $return

        catch ex {
            callback (cons () $ex)
            import-return
        }

        define import: method (path) {
            define ecex: (method () {
                request write $return $path
                return ()
            })

            define ex: ecex tail

            # TODO: Handle cases where we want to throw ().
            if (not: null? $ex) {
                throw $ex
            }

            define ec: ecex head
            if (not: null? $ec) {
                return $ec
            }

            import-return
        }

        define module-name ()

        define module: method (name) {
            if (modules has $name) {
                define module-object: modules get $name
                callback (list $module-object)
                import-return
            }
            set module-name $name
        }

        define module-object: object {
            source $path
        }

        if (not: null? $module-name) {
            modules set $module-name $module-object
        }

        callback (list $module-object)
    }

    set import: method (path) {
        define response: chan

        request write (method (returned) {
            response write $returned
        }) $path

        define ecex: response read

        define ex: ecex tail

        # TODO: Handle cases where we want to throw ().
        if (not: null? $ex) {
            throw $ex
        }

        return (ecex head)
    }

    define modules: map
    define request: chan 1

    spawn {
        while true {
            do-import (splice (request read-list))
        }
    }
}

# Prompt stuff.

define prompt
define replace-make-prompt

block {
    define call-make-prompt: method (suffix) {
        catch ignored {
            return $suffix
        }

        make-prompt $suffix
    }

    define make-prompt: method (suffix) {
        define d: str replace $PWD $HOME ~
        mend '' $USER @ (splice (capture (hostname))) : $d $suffix
    }

    set prompt: method (suffix) {
        define response: chan 1
        request write get $response $suffix
        response read
    }

    set replace-make-prompt: method (fn) {
        define response: chan 1
        request write set $response $fn
        response read
    }

    define request: chan 1

    define service: method (request) {
        define type: request get 0
        define response: request get 1

        if (equal? $type get) {
            response write (call-make-prompt (request get 2))
        } else {
            define previous-make-prompt $make-prompt
            set make-prompt (request get 2)
            response write $previous-make-prompt
        }
    }

    spawn {
        while true {
            service (request read-list)
        }
    }
}

# Exception stuff.

define catch: syntax (name (clause)) e {
    define body: list throw (list resolve $name)

    if (null? $clause) {
        set body: list body
    } else {
        set body: clause append $body
    }

    define defn: list method (list $name throw) =
    defn extend $body

    define handler: e eval $defn

    define _return_: e eval (list resolve return)
    define _throw_ $throw

    e export throw: method (msg) {
        #export throw $_throw_
        _return_ (handler $msg $_throw_)
    }
}

sys export throw: method s (msg) {
    for (trace) $error
    error error: $msg
    fatal 1
}

# Wrapped command stuff.

block {
    define wrapped-umask $umask

    set umask: method ((args)) {
        define mask: wrapped-umask (splice $args)
        if (null? $args) {
            echo $mask
        }
        return $mask
    }
}

# Command stuff.

define ...: method (dir base) {
    cd $dir || return $base
    while true {
        define path: mend / $PWD $base
        if (exists $path) {
            return $path
        }
        if (eq? $PWD /) {
            return $base
        }
        cd ..
    }
}

define coalesce: method ((terms)) e {
    define next: terms tail
    define term: terms head

    while $next {
        if (e eval (list resolves? $term)) {
            return (e eval (list resolve $term))
        }

        set term: next head
        set next: next tail
    }

    return $term
}

define error: method ((args)) {
    stderr write-line (splice $args)
}

define fn: syntax (name (body)) e {
    define body (list quote $body)

    e eval (quasiquote (define (unquote $name) (syntax ((@)) {
        define args: (unquote $e) eval (list glob (splice $@))
        define body: cons (list define @ (list list (splice $args))) (unquote $body)
        define count: number 1

        while $args {
            set body: cons (list define (symbol $count) (args head)) $body

            set args: args tail
            set count: add $count 1
        }

        set body: cons block $body

        eval $body
    })))
}

define here: method (s) {
    write-line (str trim-prefix (str trim-suffix $s $'\n') $'\n')
}

ls --color=auto / >& /dev/null && define ls: method ((args)) {
    command ls --color=auto (splice $args)
}

# TODO: Replace with internal function rather than invoking bc.
define math: method (s) {
    catch ex {
        throw "malformed expression: '${s}'"
    }

    number (splice (capture (block {
        echo 'scale=6'
        write-line $s
    } | bc)))
}

define mill: syntax ((defn)) e {
    define miller: e eval (cons method $defn)

    while (define l: read-list) {
        miller (splice $l)
    }
}

define read: method () {
    stdin read
}

define read-line: method () {
    stdin read-line
}

define read-list: method () {
    stdin read-list
}

define seq: method (n) {
    define l ()

    while (gt? $n 0) {
        set n: sub $n 1
        set l: cons $n $l
    }

    return $l
}

define write: method ((args)) e {
    stdout write (splice $args)
}

define write-line: method ((args)) {
    stdout write-line (splice $args)
}

# Completion stuff.

define complete: method ((args)) {
    catch ignored {
        return
    }

    # For now we cheat and use bash to supply completions.
    capture (bash -c '
. /usr/share/bash-completion/bash_completion

export COMP_LINE="$*"
export COMP_POINT=${#COMP_LINE}
export COMP_WORDS=("$@")
export COMP_CWORD=$((${#COMP_WORDS[@]}-1))

completer=_command
if [ ${COMP_CWORD} -eq 0 ]; then
        export COMP_CWORD=1
        export COMP_WORDS=("" "${COMP_WORDS[@]}")
else
        _completion_loader "$1"
        completer=$(complete -p "$1" | sed -r "s/.* (\w+) \w+/\1/")
fi

echo ${completer}
${completer}

[ "${#COMPREPLY[@]}" -eq 0 ] || printf "%s\n" "${COMPREPLY[@]}"
' complete (splice $args)) >& /dev/null
}

export PENISHELL_RC: coalesce PENISHELL_RC ~/.penishell-rc
exists $PENISHELL_RC && source $PENISHELL_RC
